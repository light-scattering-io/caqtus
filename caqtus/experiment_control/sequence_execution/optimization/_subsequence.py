from collections.abc import Mapping
from typing import Protocol

import polars

from caqtus.session import PureSequencePath
from caqtus.types.data import DataLabel, DataType
from caqtus.types.parameter import ParameterSchema


class SubSequence(Protocol):
    """Represents a subsequence that is part of a larger sequence.

    Objects of this type mimic the behavior of :class:`caqtus.session.Sequence` to read
    data.
    Since the subsequence is not a fully materialized sequence, it does not support
    all operations that a full sequence does.
    """

    @property
    def parent(self) -> PureSequencePath:
        """The path to the parent sequence."""
        ...

    def get_parameter_schema(self) -> ParameterSchema:
        """Return the types of the parameters used to run this sequence.

        See :class:`caqtus.session.Sequence.get_parameter_schema` for more details.
        """
        ...

    def get_data_schema(self) -> Mapping[DataLabel, DataType]:
        """Return the types of the data generated by the sequence.

        See :class:`caqtus.session.Sequence.get_data_schema` for more details.
        """
        ...

    def scan(self) -> polars.LazyFrame:
        """Lazily read the data of the subsequence.

        See :meth:`caqtus.session.Sequence.scan` for more details on the returned
        :class:`polars.LazyFrame`.

        The `sequence` column corresponds to the path of the parent sequence, and the
        `shot_index` column corresponds to the index of the shot in the parent
        sequence.
        """
        ...
